-- -------------------------------------------------------------
--
-- Module: MyFilter
-- Generated by MATLAB(R) 9.7 and Filter Design HDL Coder 3.1.6.
-- Generated on: 2020-05-06 21:17:13
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- Name: MyFilter
-- InputDataType: numerictype(1,16,15)
-- TestBenchName: MyFilter_tb

-- Filter Specifications:
--
-- Sample Rate     : N/A (normalized frequency)
-- Response        : Lowpass
-- Specification   : Fp,Fst,Ap,Ast
-- Stopband Atten. : 0.0066 dB
-- Passband Ripple : 0.0157 dB
-- Passband Edge   : 0.3
-- Stopband Edge   : 0.5
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form Symmetric FIR
-- Filter Length     : 14
-- Stable            : Yes
-- Linear Phase      : Yes (Type 2)
-- Arithmetic        : fixed
-- Numerator         : s16,16 -> [-5.000000e-01 5.000000e-01)
-- -------------------------------------------------------------
-- Multipliers           : 7


LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY MyFilter IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         filter_out                      :   OUT   std_logic_vector(35 DOWNTO 0)  -- sfix36_En31
         );

END MyFilter;


----------------------------------------------------------------
--Module Architecture: MyFilter
----------------------------------------------------------------
ARCHITECTURE rtl OF MyFilter IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16_En15
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(468, 16); -- sfix16_En16
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(-3690, 16); -- sfix16_En16
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(9465, 16); -- sfix16_En16
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(-8749, 16); -- sfix16_En16
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(-4554, 16); -- sfix16_En16
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(12350, 16); -- sfix16_En16
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(27463, 16); -- sfix16_En16

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 13); -- sfix16_En15
  SIGNAL tapsum1                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum2                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_1                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum3                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_2                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum4                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_3                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum5                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_4                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum6                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_5                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum7                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_6                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL product7                         : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product6                         : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product5                         : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product4                         : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product3                         : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product2                         : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product1_cast                    : signed(35 DOWNTO 0); -- sfix36_En31
  SIGNAL product1                         : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL sum1                             : signed(35 DOWNTO 0); -- sfix36_En31
  SIGNAL add_temp                         : signed(36 DOWNTO 0); -- sfix37_En31
  SIGNAL sum2                             : signed(35 DOWNTO 0); -- sfix36_En31
  SIGNAL add_temp_1                       : signed(36 DOWNTO 0); -- sfix37_En31
  SIGNAL sum3                             : signed(35 DOWNTO 0); -- sfix36_En31
  SIGNAL add_temp_2                       : signed(36 DOWNTO 0); -- sfix37_En31
  SIGNAL sum4                             : signed(35 DOWNTO 0); -- sfix36_En31
  SIGNAL add_temp_3                       : signed(36 DOWNTO 0); -- sfix37_En31
  SIGNAL sum5                             : signed(35 DOWNTO 0); -- sfix36_En31
  SIGNAL add_temp_4                       : signed(36 DOWNTO 0); -- sfix37_En31
  SIGNAL sum6                             : signed(35 DOWNTO 0); -- sfix36_En31
  SIGNAL add_temp_5                       : signed(36 DOWNTO 0); -- sfix37_En31
  SIGNAL output_typeconvert               : signed(35 DOWNTO 0); -- sfix36_En31
  SIGNAL output_register                  : signed(35 DOWNTO 0); -- sfix36_En31


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 13) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 13) <= delay_pipeline(0 TO 12);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  tapsum1 <= resize(delay_pipeline(0), 17) + resize(delay_pipeline(13), 17);

  tapsum_mcand <= tapsum1;

  tapsum2 <= resize(delay_pipeline(1), 17) + resize(delay_pipeline(12), 17);

  tapsum_mcand_1 <= tapsum2;

  tapsum3 <= resize(delay_pipeline(2), 17) + resize(delay_pipeline(11), 17);

  tapsum_mcand_2 <= tapsum3;

  tapsum4 <= resize(delay_pipeline(3), 17) + resize(delay_pipeline(10), 17);

  tapsum_mcand_3 <= tapsum4;

  tapsum5 <= resize(delay_pipeline(4), 17) + resize(delay_pipeline(9), 17);

  tapsum_mcand_4 <= tapsum5;

  tapsum6 <= resize(delay_pipeline(5), 17) + resize(delay_pipeline(8), 17);

  tapsum_mcand_5 <= tapsum6;

  tapsum7 <= resize(delay_pipeline(6), 17) + resize(delay_pipeline(7), 17);

  tapsum_mcand_6 <= tapsum7;

  product7 <= tapsum_mcand_6 * coeff7;

  product6 <= tapsum_mcand_5 * coeff6;

  product5 <= tapsum_mcand_4 * coeff5;

  product4 <= tapsum_mcand_3 * coeff4;

  product3 <= tapsum_mcand_2 * coeff3;

  product2 <= tapsum_mcand_1 * coeff2;

  product1_cast <= resize(product1, 36);

  product1 <= tapsum_mcand * coeff1;

  add_temp <= resize(product1_cast, 37) + resize(product2, 37);
  sum1 <= add_temp(35 DOWNTO 0);

  add_temp_1 <= resize(sum1, 37) + resize(product3, 37);
  sum2 <= add_temp_1(35 DOWNTO 0);

  add_temp_2 <= resize(sum2, 37) + resize(product4, 37);
  sum3 <= add_temp_2(35 DOWNTO 0);

  add_temp_3 <= resize(sum3, 37) + resize(product5, 37);
  sum4 <= add_temp_3(35 DOWNTO 0);

  add_temp_4 <= resize(sum4, 37) + resize(product6, 37);
  sum5 <= add_temp_4(35 DOWNTO 0);

  add_temp_5 <= resize(sum5, 37) + resize(product7, 37);
  sum6 <= add_temp_5(35 DOWNTO 0);

  output_typeconvert <= sum6;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
